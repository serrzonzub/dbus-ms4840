#!/usr/bin/python

# screen shots and mqtt -> dbus
# https://github.com/mr-manuel/venus-os_dbus-mqtt-solar-charger

# example used to create this
# https://github.com/kassl-2007/dbus-epever-tracer/blob/master/driver/dbus-epever-tracer.py

# to test
# /opt/victronenergy/serial-starter/stop-tty.sh ttyUSB1

from asyncio import exceptions
import logging
import serial
import minimalmodbus
import time
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
import dbus
import dbus.service
import os
import sys
import platform
import argparse

# victron packages
sys.path.insert(
    1,
    os.path.join(
        os.path.dirname(__file__),
        "../ext/velib_python",
    ),
)
from vedbus import VeDbusService  # noqa: E402
from settingsdevice import (  # noqa: E402
    SettingsDevice,
)

# variables
softwareversion = '0.8'
serialnumber = '0000000000000000'
productname='ms4840'
hardwareversion = '00.00'
firmwareversion = '00.00'
connection = 'USB'
servicename = 'com.victronenergy.solarcharger.tty'
deviceinstance = 290    #VRM instanze
exceptionCounter = 0
#state = [0,5,3,6]
history_days = 10

# formatting
def _a(p, v):
    return str("%.1f" % v) + "A"


def _n(p, v):
    return str("%i" % v)


def _s(p, v):
    return str("%s" % v)


def _v(p, v):
    return str("%.2f" % v) + "V"


def _w(p, v):
    return str("%i" % v) + "W"


def _kwh(p, v):
    return str("%i" % v) + "kWh"

def _C(p, v):
    return str("%i" % v) + "°C"

solar_charger_dict = {
    # general data
    "/NrOfTrackers": {"value": None, "textformat": _n},
    "/Pv/V": {"value": None, "textformat": _v},
    "/Pv/P": {"value": None, "textformat": _w},
    "/Pv/0/V": {"value": None, "textformat": _v},
    "/Pv/1/V": {"value": None, "textformat": _v},
    "/Pv/2/V": {"value": None, "textformat": _v},
    "/Pv/3/V": {"value": None, "textformat": _v},
    "/Pv/0/P": {"value": None, "textformat": _w},
    "/Pv/1/P": {"value": None, "textformat": _w},
    "/Pv/2/P": {"value": None, "textformat": _w},
    "/Pv/3/P": {"value": None, "textformat": _w},
    "/Yield/Power": {"value": None, "textformat": _w},
    # external control
    "/Link/NetworkMode": {"value": None, "textformat": _s},
    "/Link/BatteryCurrent": {"value": None, "textformat": _a},
    "/Link/ChargeCurrent": {"value": None, "textformat": _a},
    "/Link/ChargeVoltage": {"value": None, "textformat": _v},
    "/Link/NetworkStatus": {"value": None, "textformat": _s},
    "/Link/TemperatureSense": {"value": None, "textformat": _n},
    "/Link/TemperatureSenseActive": {"value": None, "textformat": _n},
    "/Link/VoltageSense": {"value": None, "textformat": _n},
    "/Link/VoltageSenseActive": {"value": None, "textformat": _n},
    # settings
    "/Settings/BmsPresent": {"value": None, "textformat": _n},
    "/Settings/ChargeCurrentLimit": {"value": None, "textformat": _n},
    # other paths
    "/Dc/0/Voltage": {"value": None, "textformat": _v},
    "/Dc/0/Current": {"value": None, "textformat": _a},
    "/Dc/0/Temperature": {"value": None, "textformat": _C},
    "/MppTemperature": {"value": None, "textformat": _C},
    "/Yield/User": {"value": None, "textformat": _kwh},
    "/Yield/System": {"value": None, "textformat": _kwh},
    "/Load/State": {"value": None, "textformat": _n},
    "/Load/I": {"value": None, "textformat": _a},
    "/ErrorCode": {"value": 0, "textformat": _n},
    "/State": {"value": 0, "textformat": _n},
    "/Mode": {"value": None, "textformat": _n},
    "/MppOperationMode": {"value": None, "textformat": _n},
    "/DeviceOffReason": {"value": None, "textformat": _s},
    "/Relay/0/State": {"value": None, "textformat": _n},
    # alarms
    "/Alarms/LowVoltage": {"value": None, "textformat": _n},
    "/Alarms/HighVoltage": {"value": None, "textformat": _n},
    # history
    "/History/Daily/0/Yield": {"value": None, "textformat": _kwh},
    "/History/Daily/0/MaxPower": {"value": None, "textformat": _w},
    "/History/Overall/DaysAvailable": {"value": history_days, "textformat": _n},
    "/History/Overall/MaxPvVoltage": {"value": None, "textformat": _n},
    "/History/Overall/MaxBatteryVoltage": {"value": None, "textformat": _n},
    "/History/Overall/MinBatteryVoltage": {"value": None, "textformat": _n},
    "/History/Overall/LastError1": {"value": None, "textformat": _n},
    "/History/Overall/LastError2": {"value": None, "textformat": _n},
    "/History/Overall/LastError3": {"value": None, "textformat": _n},
    "/History/Overall/LastError4": {"value": None, "textformat": _n},
}

# add in history paths to the dictionary
for day in range(history_days):
    solar_charger_dict.update(
        {
            "/History/Daily/" + str(day) + "/Yield": {"value": None, "textformat": _kwh},
            "/History/Daily/" + str(day) + "/MaxPower": {"value": None, "textformat": _kwh},
            "/History/Daily/" + str(day) + "/MinVoltage": {"value": None, "textformat": _v},
            "/History/Daily/" + str(day) + "/MaxVoltage": {"value": None, "textformat": _v}
        }
    )

if len(sys.argv) > 1:
    controller = minimalmodbus.Instrument(sys.argv[1], 1)
    servicename = 'com.victronenergy.solarcharger.' + sys.argv[1].split('/')[2]
else:
    print(f"no serial port given. bye.")
    sys.exit()

controller.serial.baudrate = 9600
controller.serial.bytesize = 8
controller.serial.parity = serial.PARITY_NONE
controller.serial.stopbits = 1
controller.serial.timeout = 0.2
controller.mode = minimalmodbus.MODE_RTU
controller.clear_buffers_before_each_transaction = True
#controller.close_port_afer_each_call = True

print(__file__ + " is starting up, use -h argument to see optional arguments")

class MS4840(object):
    def __init__(self, paths):
        self._dbusservice = VeDbusService(servicename, register=False)
        self._paths = paths

        # path conversion functions
        _kwh = lambda p, v: (str("%i" % v) + 'kWh')
        _a = lambda p, v: (str("%.1f" % v) + 'A')
        _w = lambda p, v: (str("%.1f" % v) + 'W')
        _v = lambda p, v: (str("%.2f" % v) + 'V')
        _c = lambda p, v: (str(v) + '°C')
        _n = lambda p, v: (str("%i" % v))
        _s = lambda p, v: (str("%s" % v))

        self.got_history = False
        self.solar_controller = {}
        self.solar_controller_history = {}
        self.pdu_addresses = {\
            "sver": {"reg": 20, "len": 8}, # 0x0014h\
            "hver": {"reg": 21, "len": 8}, # 0x0015h\
            "system information": {"reg": 12, "len": 8}, # 0x000Ch\
            
            "load_status": {"reg": 269, "len": 1}, # 0x010Dh\
            "current_system_voltage": {"reg": 256, "len": 1}, # 0x0100h\
            "battery_power": {"reg": 257, "len": 1}, # 0x0101h\
            "battery_voltage": {"reg": 258, "len": 1}, # 0x0102h\
            "solar_current": {"reg": 259, "len": 1}, # 0x0103h\ - amps
            "solar_power": {"reg": 260, "len": 1}, # 0x0104h\ - watts
            "temperatures": {"reg": 261, "len": 1}, # 0x0105h\
            "solar_voltage": {"reg": 265, "len": 1}, # 0x0109h \
            "max_power_day": {"reg": 266, "len": 1}, # 0x010Ah
            "power_gen_day": {"reg": 267, "len": 1}, # 0x010Bh
            "battery_type": {"reg": 515, "len": 1}, # 0x0202h \
            "uptime": {"reg": 271, "len": 1}, # 0x010fh
            "total_power_generation": {"reg": 272, "len": 2}, # 0x0110-0x0111h, also total yield?
            "0dhist": {"reg": 1024, "len": 5}, # 0x0400h \
            "1dhist": {"reg": 1025, "len": 5} # 0x0400h \
        }

        # create the history pdu_address entries
        for day in range(history_days):
            pdu_name = str(day) + "hist"
            reg = (1024 + int(day))
            self.pdu_addresses.update(
            {
                pdu_name: {"reg": reg, "len": 5},
            })

        logging.debug("%s /DeviceInstance = %d" % (servicename, deviceinstance))

        # Create the management objects, as specified in the ccgx dbus-api document
        self._dbusservice.add_path('/Mgmt/ProcessName', __file__)
        self._dbusservice.add_path('/Mgmt/ProcessVersion', softwareversion)
        self._dbusservice.add_path('/Mgmt/Connection', connection)

        # Create the mandatory objects
        self._dbusservice.add_path('/DeviceInstance', deviceinstance)
        self._dbusservice.add_path('/ProductId', 1)
        self._dbusservice.add_path('/ProductName', productname)
        self._dbusservice.add_path('/FirmwareVersion', firmwareversion)
        self._dbusservice.add_path('/HardwareVersion', hardwareversion)
        self._dbusservice.add_path('/Connected', 1)
        self._dbusservice.add_path('/Serial', serialnumber)
        self._dbusservice.add_path('/CustomName', None, writeable=True)

        for path, settings in self._paths.items():
            self._dbusservice.add_path(
                path,
                settings["value"],
                gettextcallback=settings["textformat"],
                writeable=True,
                onchangecallback=self._handlechangedvalue,
            )

        # register VeDbusService after all paths where added
        self._dbusservice.register()


        # create the dictionary holding read values
        #for pdu_address in self.pdu_addresses:
        #    pdu_name = pdu_address
        #    self.solar_controller[pdu_name] = [0]
        
        print(self.solar_controller)

        def _get_solar_charger_history(self, days):
            if self.got_history == False:
                days = (self.solar_controller["uptime"][0] - 1)

            if days > history_days:
                days = (history_days - 1)

            for day in range(days):
                # variable name in solar_controller
                value_key = str(day) + "hist"
                yield_key = "/History/Daily/" + str(day) + "/Yield"
                maxpower_key = "/History/Daily/" + str(day) + "/MaxPower"
                reg = int(1024 + day)
                print(f"trying to get day {day} of {days} of history (reg: {reg})")
                self.solar_controller_history[day] = controller.read_registers(reg, 5, 3)
                self.dbusservice[yield_key] = (self.solar_controller[value_key][0] / 1000)
                self.dbusservice[maxpower_key] = (self.solar_controller[value_key][2])

            print(self.solar_controller_history)
            self.got_history = True

        
        # get the history from the solar charger
        #_get_solar_charger_history(self, history_days)

        GLib.timeout_add(1000, self._update)


    def _handlechangedvalue(self, path, value):
        logging.debug("someone else updated %s to %s" % (path, value))
        return True  # accept the change
    
    def _update(self):
        global exceptionCounter
        
        def _calculate_state(status, s_curr, b_volt):
            if status == 0:
                return 0
            elif status == 2: # mptt
                # calculate which mode we are in
                if s_curr > 10:
                    return 3
                elif s_curr > 3 and s_curr < 10:
                    return 4
                elif s_curr < 3:
                    return 5
                return 3 # mppt tracker active
            else:
                return 3

        try:
            for pdu_address in self.pdu_addresses:
                pdu_name = pdu_address
                reg = self.pdu_addresses[pdu_address]['reg']
                reg_len = self.pdu_addresses[pdu_address]['len']
                #print(f"trying to read reg: {reg} - name: {pdu_name}")
                pdu_value = controller.read_registers(reg, reg_len, 3)
                self.solar_controller[pdu_name] = pdu_value
        except IOError as e:
            print(f"read_register failed")
            print(e)
        except:
            print(exceptions)
            exceptionCounter +=1
            if exceptionCounter  >= 3:
                print(f"sleeping for 3")
                exceptionCounter = 0
                time.sleep(3)
        else:
            #print(self.solar_controller)
            self._dbusservice['/Dc/0/Voltage'] = (self.solar_controller["battery_voltage"][0] / 10 )
            self._dbusservice['/Dc/0/Current'] = (self.solar_controller["solar_current"][0] * 0.01)
            self._dbusservice['/Dc/0/Temperature'] = (self.solar_controller["temperatures"][0] >> 0 & 0xff) # <-- lower 8 bits
            self._dbusservice['/MppTemperature'] = (self.solar_controller["temperatures"][0] >> 8 & 0xff) # <-- lower 8 bits
            # t2 = value >> 8 & 0xff < --> upper 8 bits
            self._dbusservice['/Pv/V'] = (self.solar_controller["solar_voltage"][0] / 10)
            self._dbusservice['/Pv/P'] = (self.solar_controller["solar_power"][0])
            self._dbusservice['/Yield/Power'] = (self.solar_controller["solar_power"][0])

            # i don't have a load option on the bougerv ms4840/helios ms4840 mppt controller
            self._dbusservice['/Load/State'] = 0
            #self._dbusservice['/Load/I'] = c3100[13]/100

            self._dbusservice['/History/Overall/DaysAvailable'] = (self.solar_controller["uptime"][0])
            self._dbusservice['/History/Daily/0/Yield'] = (self.solar_controller["power_gen_day"][0] / 1000)
            self._dbusservice['/History/Daily/0/MaxPower'] = (self.solar_controller["max_power_day"][0])
            # state is the current method the battery is being charged (bulk, absortion, float)
            
            state = _calculate_state(self.solar_controller["load_status"][0],\
                                     self.solar_controller["solar_current"][0] * 0.01,\
                                     self.solar_controller["battery_voltage"][0] / 10)
                #load_status[0], (solar_current[0] * 0.01), (battery_voltage[0] / 10 ))
            #print(f"state={state}")
            self._dbusservice['/State'] = state

            #for day in range(int(self.solar_controller["uptime"][0])):
            for day in range(int(history_days)):
                history_key = str(day) + "hist"
                #max_power_key = str(day) + "hist_max_power"
                #max_voltage_key = str(day) + "hist_max_voltage"
                #max_voltage_key = str(day) + "hist_min_voltage"
                #reg = int(1024 + day)
                #print(f"trying to get day {day} of {days} of history (reg: {reg})")
                #self.solar_controller_history[day] = controller.read_registers(reg, 5, 3)
                self._dbusservice[f"/History/Daily/{day}/Yield"] = (self.solar_controller[history_key][0] / 1000)
                self._dbusservice[f"/History/Daily/{day}/MaxPower"] = (self.solar_controller[history_key][2])
                self._dbusservice[f"/History/Daily/{day}/MaxVoltage"] = (self.solar_controller[history_key][3])
                self._dbusservice[f"/History/Daily/{day}/MinVoltage"] = (self.solar_controller[history_key][4])
            """
            # i believe this sets what the mppt should do is venus was in bms control
            self._dbusservice['/MppOperationMode'] = _convert_charging_status(load_status)

            #self._dbusservice['/Yield/User'] =(c3300[18] | c3300[19] << 8)/100
            self._dbusservice['/History/Daily/0/Yield'] = (power_gen_day[0] / 1000)
            self._dbusservice['/History/Daily/0/MaxPower'] = (max_power_day[0])
            if self.history == False:
                self._dbusservice['/History/Daily/1/Yield'] = (yesterday[0] / 1000)
                self._dbusservice['/History/Daily/1/MaxPower'] = (yesterday[2])
                self._dbusservice['/History/Overall/DaysAvailable'] = days_available[0]
                days = range(2, int(days_available[0]))
                for day in days:
                    history_data = controller.read_registers((1024 + day), 5, 3)

                self.history = True
            
            #if self._dbusservice['/Yield/Power'] > self._dbusservice['/History/Daily/0/MaxPower']:
            #    self._dbusservice['/History/Daily/0/MaxPower'] = self._dbusservice['/Yield/Power']
            """
        return True

def main():
    logging.basicConfig(level=logging.DEBUG)

    from dbus.mainloop.glib import DBusGMainLoop
    # Have a mainloop, so we can send/receive asynchronous calls to and from dbus
    DBusGMainLoop(set_as_default=True)

    # create the paths
    # add in history paths
    #for day in range(history_days):
    paths_dbus = {
        "/UpdateIndex": {"value": 0, "textformat": _n},
    }
    solar_charger_dict.update(paths_dbus)

    ms4840 = MS4840(paths = solar_charger_dict)

    logging.info('Connected to dbus, and switching over to GLib.MainLoop() (= event based)')
    mainloop = GLib.MainLoop()
    mainloop.run()


if __name__ == "__main__":
    main()
